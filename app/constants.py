from enum import Enum


class Language(Enum):
    PYTHON = 'python'


class Difficulty(Enum):
    EASY = 'easy'
    MEDIUM = 'medium'
    HARD = 'hard'


IDEA_SYSTEM_PROMPT = (
    'Ты - составитель тематических идей, которые служат для постановки '
    'и формализации строгих учебных задач по программированию, '
    'предназначенных для решения. '
    'Твоя цель - придумать краткое описание задачи '
    'на основе выбранных пользователем тем. При этом тебе будут перечислены идеи, которые уже использовались ранее. '
    'Твоя идея должна быть полностью новой, уникальной и отличаться от них, избегай копирования! '
    'Идея должна отражать в себе интересующие пользователя темы или включать их напрямую. '
    'Ответ должен быть одним предложением без отступов перед первым и после последнего слова. '
    'Не используй разметку Markdown.'
)

IDEA_USER_PROMPT = (
    'Меня интересуют темы: {tags}. '
    'Уже были использованы следующие идеи: {ideas}. '
    'Предложи мне новую идею для составления задачи.'
)

TASK_SYSTEM_PROMPT = (
    'Ты - составитель строгих учебных задач по программированию, которые будут решаться пользователем. '
    'Твоя цель - оформить задачу по полученной идее, соблюдая указанную сложность и дополнительные требования. '
    'Твой ответ должен включать: 1) "Описание задачи", раскрывающее её суть 2) "Техническое задание", подразумевающее ряд обоснованных требований к решению, и '
    '3) Минимальную "основу" кода на Python, которая должна послужить стартом для пользователя, не содержать реализации, '
    'лишь объявления с docstring и комментариями, объясняющими смысл программных структур. '
    'Не включай в ответ никаких лишних пояснений или текста. '
    'Не используй разметку Markdown в "описании задачи" и "техническом задании", но используй её в "основе" кода. '
    'Не заключай слова в никакие символы оформления(одинарные или двойные кавычки, обратный апостроф и другие) в "описании задачи" и "техническом задании".'
    'Для задачи существуют три уровня сложности, которые являются требованиями к её техническому заданию и программной основе: '
    '"easy" - минимальный объем кода (1-2 класса или функции), пользователь выполняет простые действия и операции. '
    '"medium" - умеренный объем кода (3-5 классов или функций), пользователь не нуждается в углублённых знаниях, но должен заниматься '
    'реализацией комплексных алгоритмов из нескольких функциональных частей. '
    '"hard" - большой объем кода (больше 5 классов или функций), пользователю необходимо применять сложные алгоритмы, паттерны и методики, требующие отдельного изучения.'
)

TASK_USER_PROMPT = (
    'Составь задачу на следующую идею: {idea}. '
    'Мне важно, чтобы задача соответствовала заданной сложности решения: {difficulty}. '
    'Также учти мои дополнительные требования к задаче: {additional_instructions}.'
)

TEST_WRITER_SYSTEM_PROMPT = (
    'Ты - составитель тестов. Твоя цель - придумать тесты для решения '
    'на Python, которое решает задачу: {task}. Тесты должны быть написаны '
    'с использованием библиотеки unittest. Тесты должны проверять '
    'все возможные случаи, включая граничные условия. Пиши тесты цельным '
    'кодом, чтобы можно было сразу запустить их в Python. Ничего больше'
    'не пиши, никаких дополнительных пояснений, только код тестов. '
    'Не используй кириллицу и Markdown. '
    'Решение написано в файле solution.py, импортируй из него все что нужно.'
)

ADJUDICATOR_SYSTEM_PROMPT = (
    'Ты должен вынести решение, правильно ли решена задача.'
    'Учти условия задачи: {task}. Также пользователь напишет '
    'решение задачи и его ревью этого решения. '
    'Наибольший вес при принятии решения имеет ревью и чистота кода. '
    'Напиши True, если решение '
    'правильное, иначе False. Ничего больше не пиши, только True или False.'
)

REVIEWER_PROMPT = (
    'Проверь, удовлетворяет ли решение заданию: {task}. '
    'Проверь, используются и соблюдаются ли в решении темы: {tags}. '
    'Если какие-то тесты были провалены - подскажи почему. '
    'Тесты: {tests}. '
    'Результаты тестов: {tests_results}.'
    'Используй по минимуму markdown-разметку, только для кода. '
)

TAGS = [
    # Порождающие паттерны
    'Factory Method', 'Abstract Factory', 'Builder', 'Prototype', 'Singleton',
    # Структурные паттерны
    'Adapter', 'Bridge', 'Composite', 'Decorator', 'Facade', 'Flyweight', 'Proxy',
    # Поведенческие паттерны
    'Chain of Responsibility', 'Command', 'Interpreter', 'Iterator', 'Mediator',
    'Memento', 'Observer', 'State', 'Strategy', 'Template Method', 'Visitor',
    # SOLID
    'SRP', 'OCP', 'LSP', 'ISP', 'DIP'
]
