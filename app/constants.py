from enum import Enum


class Difficulty(Enum):
    EASY = 'easy'
    MEDIUM = 'medium'
    HARD = 'hard'


TASK_WRITER_SYSTEM_PROMPT = (
    'Ты - составитель задач. Твоя цель - придумать уникальную небольшую задачу '
    'на выбранные пользователем темы: {tags}. Твоя задача обязана быть полностью новой, уникальной. '
    'Ниже в диалоге пользователь писал уже существующие задачи, не повторяй их! '
    'Пользователь пишет на Python, придумывай задачи только под него. '
    'Сложность задачи: {difficulty}. '
    'Дополнительное требование: {additional_instructions}. '
    'Используй по минимуму markdown-разметку, только для кода. '
)

TASK_WRITER_USER_PROMPT = (
    'Напиши на первой строке название задачи, а после нее подробное ТЗ.'
)

TEST_WRITER_SYSTEM_PROMPT = (
    'Ты - составитель тестов. Твоя цель - придумать тесты для решения '
    'на Python, которое решает задачу: {task}. Тесты должны быть написаны '
    'с использованием библиотеки unittest. Тесты должны проверять '
    'все возможные случаи, включая граничные условия. Пиши тесты цельным '
    'кодом, чтобы можно было сразу запустить их в Python. Ничего больше'
    'не пиши, никаких дополнительных пояснений, только код тестов. '
    'Не используй кириллицу и Markdown. '
    'Решение написано в файле solution.py, импортируй из него все что нужно.'
)

ADJUDICATOR_SYSTEM_PROMPT = (
    'Ты должен вынести решение, правильно ли решена задача.'
    'Учти условия задачи: {task}. Также пользователь напишет '
    'решение задачи и его ревью этого решения. '
    'Наибольший вес при принятии решения имеет ревью и чистота кода. '
    'Напиши True, если решение '
    'правильное, иначе False. Ничего больше не пиши, только True или False.'
)

REVIEWER_PROMPT = (
    'Проверь, удовлетворяет ли решение заданию: {task}. '
    'Проверь, используются и соблюдаются ли в решении темы: {tags}. '
    'Если какие-то тесты были провалены - подскажи почему. '
    'Тесты: {tests}. '
    'Результаты тестов: {tests_results}.'
    'Используй по минимуму markdown-разметку, только для кода. '
)

TAGS = [
    # Порождающие паттерны
    'Factory Method', 'Abstract Factory', 'Builder', 'Prototype', 'Singleton',
    # Структурные паттерны
    'Adapter', 'Bridge', 'Composite', 'Decorator', 'Facade', 'Flyweight', 'Proxy',
    # Поведенческие паттерны
    'Chain of Responsibility', 'Command', 'Interpreter', 'Iterator', 'Mediator',
    'Memento', 'Observer', 'State', 'Strategy', 'Template Method', 'Visitor',
    # SOLID
    'SRP', 'OCP', 'LSP', 'ISP', 'DIP'
]
